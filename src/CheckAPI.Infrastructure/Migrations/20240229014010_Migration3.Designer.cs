// <auto-generated />
using System;
using CheckAPI.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CheckAPI.Infrastructure.Migrations
{
    [DbContext(typeof(CheckAPIContext))]
    [Migration("20240229014010_Migration3")]
    partial class Migration3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CheckAPI.Domain.Inspecoes.Entities.RelatorioDeInspecao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("id");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime")
                        .HasColumnName("data_cadastro");

                    b.Property<DateTime?>("DataUltimaModificacao")
                        .HasColumnType("datetime")
                        .HasColumnName("data_ultima_modificacao");

                    b.Property<Guid>("InspecaoId")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("id_inspecao");

                    b.Property<string>("Observacao")
                        .HasColumnType("varchar(512)")
                        .HasColumnName("observacao");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("titulo");

                    b.Property<string>("Valor")
                        .IsRequired()
                        .HasColumnType("varchar(512)")
                        .HasColumnName("valor");

                    b.HasKey("Id");

                    b.HasIndex("InspecaoId");

                    b.ToTable("relatorios_inspecao", (string)null);
                });

            modelBuilder.Entity("CheckAPI.Domain.Inspecoes.Funcionario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("id");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime")
                        .HasColumnName("data_cadastro");

                    b.Property<DateTime?>("DataUltimaModificacao")
                        .HasColumnType("datetime")
                        .HasColumnName("data_ultima_modificacao");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.HasKey("Id");

                    b.ToTable("funcionarios", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("Funcionario");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("CheckAPI.Domain.Inspecoes.Inspecao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("id");

                    b.Property<byte?>("Conclusao")
                        .HasColumnType("tinyint")
                        .HasColumnName("conclusao");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime")
                        .HasColumnName("data_cadastro");

                    b.Property<DateTime?>("DataUltimaModificacao")
                        .HasColumnType("datetime")
                        .HasColumnName("data_ultima_modificacao");

                    b.Property<Guid>("IdExecutor")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("id_executor");

                    b.Property<Guid?>("IdSupervisor")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("id_supervisor");

                    b.Property<Guid>("IdVeiculo")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("id_veiculo");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("IdExecutor");

                    b.HasIndex("IdSupervisor");

                    b.HasIndex("IdVeiculo");

                    b.ToTable("inspecoes", (string)null);
                });

            modelBuilder.Entity("CheckAPI.Domain.Inspecoes.Veiculo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("id");

                    b.Property<short>("Ano")
                        .HasColumnType("smallint")
                        .HasColumnName("ano");

                    b.Property<string>("Cor")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasColumnName("cor");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime")
                        .HasColumnName("data_cadastro");

                    b.Property<DateTime?>("DataUltimaModificacao")
                        .HasColumnType("datetime")
                        .HasColumnName("data_ultima_modificacao");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("marca");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("modelo");

                    b.Property<string>("Placa")
                        .IsRequired()
                        .HasColumnType("char(7)")
                        .HasColumnName("placa");

                    b.HasKey("Id");

                    b.ToTable("veiculo", (string)null);
                });

            modelBuilder.Entity("CheckAPI.Domain.Inspecoes.Executor", b =>
                {
                    b.HasBaseType("CheckAPI.Domain.Inspecoes.Funcionario");

                    b.HasDiscriminator().HasValue("Executor");
                });

            modelBuilder.Entity("CheckAPI.Domain.Inspecoes.Supervisor", b =>
                {
                    b.HasBaseType("CheckAPI.Domain.Inspecoes.Funcionario");

                    b.HasDiscriminator().HasValue("Supervisor");
                });

            modelBuilder.Entity("CheckAPI.Domain.Inspecoes.Entities.RelatorioDeInspecao", b =>
                {
                    b.HasOne("CheckAPI.Domain.Inspecoes.Inspecao", "Inspecao")
                        .WithMany("Relatorios")
                        .HasForeignKey("InspecaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inspecao");
                });

            modelBuilder.Entity("CheckAPI.Domain.Inspecoes.Inspecao", b =>
                {
                    b.HasOne("CheckAPI.Domain.Inspecoes.Executor", "Executor")
                        .WithMany("Inspecoes")
                        .HasForeignKey("IdExecutor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CheckAPI.Domain.Inspecoes.Supervisor", "Supervisor")
                        .WithMany("Inspecoes")
                        .HasForeignKey("IdSupervisor");

                    b.HasOne("CheckAPI.Domain.Inspecoes.Veiculo", "Veiculo")
                        .WithMany("Inspecoes")
                        .HasForeignKey("IdVeiculo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Executor");

                    b.Navigation("Supervisor");

                    b.Navigation("Veiculo");
                });

            modelBuilder.Entity("CheckAPI.Domain.Inspecoes.Inspecao", b =>
                {
                    b.Navigation("Relatorios");
                });

            modelBuilder.Entity("CheckAPI.Domain.Inspecoes.Veiculo", b =>
                {
                    b.Navigation("Inspecoes");
                });

            modelBuilder.Entity("CheckAPI.Domain.Inspecoes.Executor", b =>
                {
                    b.Navigation("Inspecoes");
                });

            modelBuilder.Entity("CheckAPI.Domain.Inspecoes.Supervisor", b =>
                {
                    b.Navigation("Inspecoes");
                });
#pragma warning restore 612, 618
        }
    }
}
